#
#
# Description: Build OpenWrt using Github Actions with config.yaml

name: Build OpenWrt

on:
  - push

env:
  WORKDIR: /workdir
  ENVPATH: /env
  CONFIG: config.toml

jobs:
  config_build:
    name: Generate config from config.yaml
    runs-on: ubuntu-latest
    steps:
      - name: Initialization environment
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install software-properties-common
          sudo -E add-apt-repository ppa:deadsnakes/ppa
          sudo -E apt-get -qq install python3.9

          sudo -E mkdir -p ${{ env.ENVPATH }}
          sudo -E chown $USER:$GROUPS ${{ env.ENVPATH }}

          sudo ln -sf /usr/bin/python3.9 /usr/bin/python3
          python --version
          sudo -E python3 -m pip install toml pydash

      - name: Checkout repository
        uses: actions/checkout@main

      - name: Checkout config
        id: checkout_config
        run: |
          export WORKSPACE=${GITHUB_WORKSPACE}
          export ENVPATH=${{ env.ENVPATH }}
          
          chmod +x ${WORKSPACE}/bin/parse.sh
          source ${WORKSPACE}/bin/parse.sh

          scripts_dir=`get_config -t '.scripts_dir'`
          feeds_dir=`get_config -t '.feeds_dir'`
          config_dir=`get_config -t '.config_dir'`
          src_repo=`get_config -t '.repo'`
          src_branch=`get_config -t '.branch'`
          
          upload_release=`get_config -t '.upload_release'`

          SCRIPTS_DIR=`workspace_dir -p ${scripts_dir}`
          FEEDS_DIR=`workspace_dir -p ${feeds_dir}`
          CONFIG_DIR=`workspace_dir -p ${config_dir}`
          SRC_DIR=`workspace_dir -p ${{ env.WORKDIR }}/openwrt`

          set_global_env SCRIPTS_DIR ${SCRIPTS_DIR}
          set_global_env FEEDS_DIR ${FEEDS_DIR}
          set_global_env CONFIG_DIR ${CONFIG_DIR}
          set_global_env SRC_DIR ${SRC_DIR}
          set_global_env SRC_REPO ${src_repo}
          set_global_env SRC_BRANCH ${src_branch}
          set_global_env UPLOAD_RELEASE ${upload_release}
          configs=`get_config -t ".configs" -k`

          echo "::set-output name=configs::${configs}"

      - name: Upload env
        uses: actions/upload-artifact@v2
        with:
          name: github-env
          path: ${{ env.ENVPATH }}

    outputs:
      configs: ${{ steps.checkout_config.outputs.configs  }}

  openwrt_build:
    name: Build OpenWrt
    runs-on: ubuntu-20.04
    needs: config_build
    strategy:
      matrix:
        config: ${{ fromJson(needs.config_build.outputs.configs) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq install jq
          sudo -E apt-get -qq install tree
          sudo -E apt-get -qq install software-properties-common
          sudo -E add-apt-repository ppa:deadsnakes/ppa
          sudo -E apt-get -qq install python3.9

          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p ${{ env.WORKDIR }}
          sudo chown $USER:$GROUPS ${{ env.WORKDIR }}

          sudo mkdir -p ${{ env.ENVPATH }}
          sudo chown $USER:$GROUPS ${{ env.ENVPATH }}

          echo "WORKSPACE=${GITHUB_WORKSPACE}" >> ${GITHUB_ENV}
          echo "PARSE_BIN=${GITHUB_WORKSPACE}/bin/parse.sh" >> ${GITHUB_ENV}
          echo "ENVFILE=${{ env.ENVPATH }}/env" >> ${GITHUB_ENV}

          chmod +x ${GITHUB_WORKSPACE}/bin/parse.sh

          sudo ln -sf /usr/bin/python3.9 /usr/bin/python3
          python3 --version
          sudo python3 -m pip install toml pydash

      - name: Download Github ENV
        uses: actions/download-artifact@v2
        with:
          name: github-env
          path: ${{ env.ENVPATH }}

      - name: Initialization GITHUB_ENV
        run: |
          cat ${ENVFILE} >> ${GITHUB_ENV}

      - name: Echo Github ENV
        run: cat ${GITHUB_ENV}


      - name: Clone source code
        working-directory: ${{ env.WORKDIR }}
        run: |
          df -hT $PWD
          git clone ${{ env.SRC_REPO }} -b ${{ env.SRC_BRANCH }} ${{ env.SRC_DIR }}
          ln -sf ${{ env.SRC_DIR }} ${GITHUB_WORKSPACE}/openwrt

      - name: Load custom config
        run: |
          echo "==="
          tree ${GITHUB_WORKSPACE}
          echo "==="

          source ${PARSE_BIN}

          # feeds
          seach=".configs.[${{ matrix.config }}].feeds"

          feed_list=(`get_config -t ${search} | jq ".[]?"`)
          for feed in $feed_list
          do
            feed_path=`path_concat -p ${{ env.FEEDS_DIR }} -p ${feed}`
            cat ${feed_path} >> `path_concat -p ${{ env.SRC_DIR }} -p feeds.conf.default`
          done

          # scripts
          seach=".configs.[${{ matrix.config }}].scripts"
          scripts_list=(`get_config -t ${search} | jq ".[]?"`)
          for script in ${scripts_list}
          do
            s=`path_concat -p ${{ env.SCRIPTS_DIR }} -p ${script}`
            chmod +x ${s}
            SRC_DIR=${{ env.SRC_DIR }} ${s}
          done

          # config
          seach=".configs.[${{ matrix.config }}].config"
          config_path=`get_config -t ${seach}`
          cat `path_concat -p ${{ env.CONFIG_DIR }} -p ${config_path}` > `path_concat -p ${{ env.SRC_DIR }} -p .config`

          seach=".configs.[${{ matrix.config }}].name"
          config_name=`get_config -t ${search}`

          echo "CONFIG_NAME=${config_name}" >> ${GITHUB_ENV}

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Organize files
        id: organize
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: CONFIG_${{ env.CONFIG_NAME }}_OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::${{ env.CONFIG_NAME }}_$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          echo "time: `date +'%Y.%m.%d-%H%M'`" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
  
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 6
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
